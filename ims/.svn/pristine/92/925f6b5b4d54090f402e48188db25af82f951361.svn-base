package com.eme.ims.client.test;import java.util.concurrent.atomic.AtomicInteger;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.eme.ims.utils.PropertyConfig;public class PerfClientTest {			private static AtomicInteger CONNECTION_TOTAL = new AtomicInteger();	private static AtomicInteger CONNECTION_SUCCESSFUL = new AtomicInteger();	private static AtomicInteger CONNECTION_FAILED = new AtomicInteger();		private static final Logger logger = LoggerFactory.getLogger(PerfClientTest.class);		private PropertyConfig config ;	private Integer connections;			public static void main(String[] args) {		PerfClientTest test = new PerfClientTest("perf-test.ini");		test.run();	}		public PerfClientTest(String configFile) {				config = new PropertyConfig(configFile, 1);		connections = config.getInteger("client.connections");			}		public void run() {				Thread[] pool = new Thread[connections];				for (int i=0; i<connections; i++) {			Thread thread = new Thread(new PerfTestRunnable(config));			pool[i] = thread;		}				long startTime= System.currentTimeMillis();				for (int i=0; i<connections; i++) {			try {				pool[i].start();				long elapsed = System.currentTimeMillis() - startTime;				String outputText = String.format("\rTotalConnection: %5d, Successfull: %5d, Failed: %5d, Start: %10d, Elasped: %10d", 						CONNECTION_TOTAL.get(), CONNECTION_SUCCESSFUL.get(), CONNECTION_FAILED.get(), startTime, elapsed/1000);				System.out.print(outputText.trim());				Thread.sleep(10);			} catch (Exception e) {				logger.error("failed to create connection.");				System.exit(0);				break;			}		}	}			public static void increaseTotalConnection() {		CONNECTION_TOTAL.incrementAndGet();	}		public static void increaseSuccessfulConnection() {		CONNECTION_SUCCESSFUL.incrementAndGet();	}		public static void increaseFailedConnection() {		CONNECTION_FAILED.incrementAndGet();	}		}