package com.eme.ims.client;import org.apache.mina.core.service.IoHandlerAdapter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.eme.ims.codec.Message;import com.eme.ims.codec.MsgProtocol;import com.eme.ims.utils.PropertyConfig;public class App {	private static final MessageClient client = new MessageClient();	private static final String CLIENT_CONFIG_FILE="client.ini";	private final static Logger logger = LoggerFactory.getLogger(App.class);		public static void main(String[] args) {				Runtime.getRuntime().addShutdownHook(new Thread() {			public void run() {				shutdown();			}		});				PropertyConfig config = new PropertyConfig(CLIENT_CONFIG_FILE, 1);		String host = config.getString("server.host");		Integer port = config.getInteger("server.port");		String from = config.getString("from");		String to = config.getString("to");				IoHandlerAdapter handler = new ClientHandler();				client.setHost(host);		client.setPort(port);		client.setHandler(handler);		if (client.connect(config)) {			logger.debug("connected to server successfully.");						Message message = new Message();						message.setEventTime(System.currentTimeMillis());			message.setFrom(from);			message.setTo(to);			message.setStatus(MsgProtocol.MsgStatus.SENDING);			message.setDirection(MsgProtocol.MsgDirection.CLIENT_TO_SERVER);			connect(client, message);			sendTextMessage(client, message);			//sendEmoticonMessage(client, message);			//sendAddFriendRequest(client, message);			//handleAddFriendRequest(client, message);			//disconnect(client, message);		} else {			logger.debug("failed to connect to server, this client will exit immediately");			System.exit(0);		}	}		private static void connect(MessageClient client, Message message) {		message.setCommandId(MsgProtocol.Command.REGISTRATION);		client.sendMessage(message);	}		private static void disconnect(MessageClient Client, Message message) {		message.setCommandId(MsgProtocol.Command.DISCONNECT);		client.sendMessage(message);	}		private static void sendTextMessage(MessageClient client, Message message) {		message.setCommandId(MsgProtocol.Command.SEND_P2P_MESSAGE);		message.setType(MsgProtocol.MsgType.TEXT);		message.setContents("我爱你, Mina");		client.sendMessage(message);	}		private static void sendEmoticonMessage(MessageClient client, Message message) {		String emoticonFileName = "a.png";		message.setCommandId(MsgProtocol.Command.SEND_P2P_MESSAGE);		message.setType(MsgProtocol.MsgType.EMOTICON);		message.setContents(emoticonFileName);		client.sendMessage(message);	}		private static void sendAddFriendRequest(MessageClient client, Message message) {			}		private static void handleAddFriendRequest(MessageClient client, Message message) {			}		public static void shutdown() {		logger.info("this connection will be closed to server.");		client.disconnect();	}}