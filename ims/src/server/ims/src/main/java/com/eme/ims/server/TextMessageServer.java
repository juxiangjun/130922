package com.eme.ims.server;import java.io.IOException;import java.net.InetAddress;import java.net.InetSocketAddress;import org.apache.mina.core.service.IoHandlerAdapter;import org.apache.mina.filter.codec.ProtocolCodecFactory;import org.apache.mina.filter.codec.ProtocolCodecFilter;import org.apache.mina.filter.executor.ExecutorFilter;import org.apache.mina.filter.logging.LogLevel;import org.apache.mina.filter.logging.LoggingFilter;import org.apache.mina.transport.socket.SocketSessionConfig;import org.apache.mina.transport.socket.nio.NioSocketAcceptor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class TextMessageServer {	public static Logger logger = LoggerFactory.getLogger(TextMessageServer.class);	/**	 * Blow lines are the configuration for instance message server. 	 */	private int maxCapacity = 128;	private int writeTimeout = 30;	private int bothIdleTime = 600;		private String host;	private int port;		private IoHandlerAdapter handler = null;	private NioSocketAcceptor acceptor = null;			public boolean start() {				boolean result = false;				if (port == 0) {			logger.error("server port isn't set.");		}				if (handler == null) {			logger.error("handler is null");		}				if (acceptor == null) {						ProtocolCodecFactory codecFactory = null;			codecFactory = (ProtocolCodecFactory) handler;						acceptor = new NioSocketAcceptor();			// set connection handler			acceptor.setHandler(handler);			// set logging filter			LoggingFilter loggingFilter = new LoggingFilter();			loggingFilter.setExceptionCaughtLogLevel(LogLevel.INFO);			acceptor.getFilterChain().addLast("logger", loggingFilter);			// set encoder|decoder factory...			acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(codecFactory));			acceptor.getFilterChain().addLast("threadPool", new ExecutorFilter(16, maxCapacity));						SocketSessionConfig socketSessionConfig = acceptor.getSessionConfig();			socketSessionConfig.setKeepAlive(true);			socketSessionConfig.setWriteTimeout(this.writeTimeout);			socketSessionConfig.setBothIdleTime(this.bothIdleTime);						try {				logger.debug("trying to start server, @"+host+","+port);				InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getByName(host), port);				acceptor.bind(socketAddress);				result = true;				logger.debug("server started.");			} catch (IOException e){				logger.error(e.getLocalizedMessage());				logger.error("failed...");				result =false;			}		}				return result;	}		public boolean stop() {		boolean result = false;		if (acceptor != null && acceptor.isActive()) {			acceptor.dispose();			result = true;		} 		logger.info("server stoped.");		return result;	}		public boolean serverIsStarted() {		boolean result = true;		if (this.acceptor == null) {			result = false;		}		return result;	}	public int getMaxCapacity() {		return maxCapacity;	}	public void setMaxCapacity(int maxCapacity) {		this.maxCapacity = maxCapacity;	}	public int getWriteTimeout() {		return writeTimeout;	}	public void setWriteTimeout(int writeTimeout) {		this.writeTimeout = writeTimeout;	}	public int getBothIdleTime() {		return bothIdleTime;	}	public void setBothIdleTime(int bothIdleTime) {		this.bothIdleTime = bothIdleTime;	}	public String getHost() {		return host;	}	public void setHost(String host) {		this.host = host;	}	public int getPort() {		return port;	}	public void setPort(int port) {		this.port = port;	}	public IoHandlerAdapter getHandler() {		return handler;	}	public void setHandler(IoHandlerAdapter handler) {		this.handler = handler;	}	}