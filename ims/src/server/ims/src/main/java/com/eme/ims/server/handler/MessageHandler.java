package com.eme.ims.server.handler;import java.util.List;import org.apache.mina.core.session.IoSession;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.eme.ims.codec.Message;import com.eme.ims.codec.MsgProtocol;import com.eme.ims.codec.MsgProtocol.MsgStatus;import com.eme.ims.server.DBManager;import com.eme.ims.server.SessionPoolManager;public enum MessageHandler {		INSTANCE;		public static Logger logger = LoggerFactory.getLogger(MessageHandler.class);		SessionPoolManager sessionManager = SessionPoolManager.INSTANCE;	DBManager dbManager = DBManager.INSTANCE;				public void sendP2PMessage(IoSession session, Message message) {				logger.debug("P2P handler will help you send message to ["+message.getTo()+"]");		message.setCommandId(MsgProtocol.Command.ON_RECEIVED_P2P_MESSAGE);		message.setStatus(MsgProtocol.MsgStatus.SENDING);				IoSession destination = sessionManager.getSession(message.getTo());				if (null == destination || !destination.isConnected()) {			message.setError(MsgProtocol.Error.USER_NOT_ONLINE);			logger.debug("["+message.getTo()+"] 's session is null,  message will be saved in database;");		} else {			logger.debug("["+message.getTo()+"] is found...;");			destination.write(message);			message.setError(MsgProtocol.Error.SUCCESS);		}				message.setCommandId(MsgProtocol.Command.SEND_P2P_MESSAGE_RESPONSE);		message.setDirection(MsgProtocol.MsgDirection.SERVER_TO_CLIENT);		message.setStatus(MsgStatus.DELIVERED);				if (message.getType() != MsgProtocol.MsgType.VOICE) {			message.setContents("Delivered".getBytes());		}				session.write(message);	}			public void sendGroupMessage(IoSession session, Message message) {		List<IoSession> sessions = sessionManager.getGroupSessions(message.getGroupId());		for (IoSession toSession : sessions) {			toSession.write(message);			dbManager.saveMessage(message);		}	}			public void sendAddFriendRequest(IoSession session, Message message) {				IoSession toSession = sessionManager.getSession(message.getTo());				if (null != toSession) {			toSession.write(message);			message.setError(MsgProtocol.Error.SUCCESS);		} else {			message.setError(MsgProtocol.Error.USER_NOT_ONLINE);		}		dbManager.saveMessage(message);		session.write(message);	}		public void handleAddFriendRequest(IoSession session, Message message) {			}		}