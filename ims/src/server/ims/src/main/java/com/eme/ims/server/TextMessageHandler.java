package com.eme.ims.server;import org.apache.mina.core.service.IoHandlerAdapter;import org.apache.mina.core.session.IdleStatus;import org.apache.mina.core.session.IoSession;import org.apache.mina.filter.codec.ProtocolCodecFactory;import org.apache.mina.filter.codec.ProtocolDecoder;import org.apache.mina.filter.codec.ProtocolEncoder;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.eme.ims.codec.Message;import com.eme.ims.codec.MessageDecoder;import com.eme.ims.codec.MessageEncoder;import com.eme.ims.codec.MsgProtocol;import com.eme.ims.utils.PropertyConfig;public class TextMessageHandler  extends IoHandlerAdapter  implements ProtocolCodecFactory{		private Logger logger = LoggerFactory.getLogger(TextMessageHandler.class);		private ActionDispatcher dispatcher = ActionDispatcher.INSTANCE;		private ProtocolEncoder encoder;	private ProtocolDecoder decoder;		private PropertyConfig config;		public TextMessageHandler(PropertyConfig config) {		this.config = config;		encoder = new MessageEncoder(config);		decoder = new MessageDecoder(this.config);	}		@Override	public ProtocolEncoder getEncoder(IoSession session) throws Exception {		return this.encoder;	}	@Override	public ProtocolDecoder getDecoder(IoSession session) throws Exception {		return this.decoder;	}	public void sessionCreated(IoSession session) throws Exception {    }    public void sessionOpened(IoSession session) throws Exception {    }    public void sessionClosed(IoSession session) throws Exception {    }    public void sessionIdle(IoSession session, IdleStatus status) throws Exception {    }    public void exceptionCaught(IoSession session, Throwable cause) throws Exception {    	logger.error("exception encoutered:"+cause);    }    public void messageReceived(IoSession session, Object message) throws Exception {    	logger.debug("message received...");     	if (message instanceof Message) {     		Message msg = (Message) message;     		msg.setDirection(MsgProtocol.MsgDirection.SERVER_TO_CLIENT);     		dispatcher.dispatch(session, msg);     	} else {     		logger.error("unknow data type");     	}    }    public void messageSent(IoSession session, Object message) throws Exception {        //TODO message sent.    }}