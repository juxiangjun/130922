package com.eme.ims.server;import java.util.Date;import java.util.concurrent.atomic.AtomicInteger;import org.apache.mina.core.service.IoHandlerAdapter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.eme.ims.utils.PropertyConfig;public class App {		private final static String SERVER_CONFIG_FILE="server.ini";	private final static Logger logger = LoggerFactory.getLogger(App.class);	private static TextMessageServer server = new TextMessageServer();		private static AtomicInteger TOTAL_CONNECTIONS = new AtomicInteger();	private static AtomicInteger ACTIVE_CONNECTIONS = new AtomicInteger();	private static AtomicInteger IDLE_CONNECTIONS = new AtomicInteger();	private static AtomicInteger CLOSED_CONNECTIONS = new AtomicInteger();			public static void main(String[] args) {		Runtime.getRuntime().addShutdownHook(new Thread() {			public void run() {				shutdown();			}		});				logger.info("preparing server.");		Long now = System.currentTimeMillis();		logger.debug("now:"+ now.toString());		PropertyConfig config = new PropertyConfig(SERVER_CONFIG_FILE, 1);				IoHandlerAdapter handler = new TextMessageHandler(config);		server.setHandler(handler);				String host = config.getString("server.host");		int port = config.getInteger("server.port").intValue();						server.setBothIdleTime(config.getInteger("server.bothIdleTime"));		server.setMaxCapacity(config.getInteger("server.maxCapacity"));		server.setHost(host);		server.setPort(port);				if (!server.start()) {			logger.error("system will exit immediately....");			System.exit(0);		} else {			System.out.print("server started at "+ new Date(System.currentTimeMillis()));			/*			while(TOTAL_CONNECTIONS.get()>0) {				String outputText = String.format("\r Connections: Total=%5d, Active=%5d, Closed=%5d, Idle=%5d, Start: %10d, Elasped: %10d", args);				System.out.println(outputText.trim());				try {					Thread.sleep(1000);				} catch (InterruptedException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}							}			*/		}			}		public static void shutdown(){		server.stop();	}				public static void increaseTotalConnections() {		TOTAL_CONNECTIONS.incrementAndGet();	}		public static void increaseActiveConnections() {		ACTIVE_CONNECTIONS.incrementAndGet();	}		public static void increaseIdleConnections() {		IDLE_CONNECTIONS.incrementAndGet();	}		public static void increaseClosedConnections() {		CLOSED_CONNECTIONS.incrementAndGet();	}}